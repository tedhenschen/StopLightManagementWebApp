// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StopLightManagement.Context;

namespace StopLightManagement.Migrations
{
    [DbContext(typeof(TierMeetingContext))]
    partial class TierMeetingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StopLightManagement.Models.Attendee", b =>
                {
                    b.Property<int>("MeetingID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.HasKey("MeetingID", "EmployeeID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Attendee");
                });

            modelBuilder.Entity("StopLightManagement.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("StopLightManagement.Models.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SiteCode")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(10)");

                    b.Property<int>("SiteOrganizationID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SiteCode", "SiteOrganizationID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("StopLightManagement.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(250)")
                        .HasMaxLength(250);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(250)")
                        .HasMaxLength(250);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)")
                        .HasMaxLength(100);

                    b.Property<int>("departmentID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("departmentID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("StopLightManagement.Models.Issue", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("OriginalDueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("RaisedAtID")
                        .HasColumnType("int");

                    b.Property<int>("RaisedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RevisedDueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Statement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RaisedAtID");

                    b.HasIndex("RaisedById");

                    b.HasIndex("StatusId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("StopLightManagement.Models.IssueComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("IssueID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IssueID");

                    b.ToTable("IssueComments");
                });

            modelBuilder.Entity("StopLightManagement.Models.IssueStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("IssueStatus");
                });

            modelBuilder.Entity("StopLightManagement.Models.KPI", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("PerformanceIndicator")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DepartmentID");

                    b.ToTable("KPIS");
                });

            modelBuilder.Entity("StopLightManagement.Models.Meeting", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationID")
                        .HasColumnType("int");

                    b.Property<string>("SiteCode")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(10)");

                    b.Property<int>("TierLevel")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SiteCode", "OrganizationID");

                    b.ToTable("Meetings");

                    b.HasCheckConstraint("ck_TierLevel", "TierLevel Between 0 AND 10");

                    b.HasCheckConstraint("ck_Frequency", "Frequency IN ('Daily','Weekly','Bi-Weekly','Monthly')");
                });

            modelBuilder.Entity("StopLightManagement.Models.MeetingKPI", b =>
                {
                    b.Property<int>("MeetingID")
                        .HasColumnType("int");

                    b.Property<int>("KPIID")
                        .HasColumnType("int");

                    b.HasKey("MeetingID", "KPIID");

                    b.HasIndex("KPIID");

                    b.ToTable("MeetingKPI");
                });

            modelBuilder.Entity("StopLightManagement.Models.Organization", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("StopLightManagement.Models.Site", b =>
                {
                    b.Property<string>("SiteCode")
                        .HasColumnType("NVARCHAR(10)")
                        .HasMaxLength(10);

                    b.Property<int>("OrganizationID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)")
                        .HasMaxLength(100);

                    b.HasKey("SiteCode", "OrganizationID");

                    b.HasIndex("OrganizationID");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("StopLightManagement.Models.Target", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("DateDisabled")
                        .HasColumnType("datetime2");

                    b.Property<int>("KPIID")
                        .HasColumnType("int");

                    b.Property<double?>("LowerRange")
                        .HasColumnType("float");

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(25)")
                        .HasMaxLength(25);

                    b.Property<double?>("UpperRange")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("KPIID");

                    b.ToTable("Targets");

                    b.HasCheckConstraint("ck_NullRange", "LowerRange is not null or UpperRange is not null");
                });

            modelBuilder.Entity("StopLightManagement.Models.Attendee", b =>
                {
                    b.HasOne("StopLightManagement.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StopLightManagement.Models.Meeting", "Meeting")
                        .WithMany()
                        .HasForeignKey("MeetingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StopLightManagement.Models.Department", b =>
                {
                    b.HasOne("StopLightManagement.Models.Site", "Site")
                        .WithMany("Departments")
                        .HasForeignKey("SiteCode", "SiteOrganizationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("StopLightManagement.Models.Employee", b =>
                {
                    b.HasOne("StopLightManagement.Models.Department", "department")
                        .WithMany("Employee")
                        .HasForeignKey("departmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StopLightManagement.Models.Issue", b =>
                {
                    b.HasOne("StopLightManagement.Models.Employee", "Owner")
                        .WithMany("IssuesOwned")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StopLightManagement.Models.Meeting", "RaisedAt")
                        .WithMany()
                        .HasForeignKey("RaisedAtID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StopLightManagement.Models.Employee", "RaisedBy")
                        .WithMany("IssuesRaised")
                        .HasForeignKey("RaisedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StopLightManagement.Models.IssueStatus", "Status")
                        .WithMany("Issues")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StopLightManagement.Models.IssueComment", b =>
                {
                    b.HasOne("StopLightManagement.Models.Issue", "Issue")
                        .WithMany("IssueComments")
                        .HasForeignKey("IssueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StopLightManagement.Models.KPI", b =>
                {
                    b.HasOne("StopLightManagement.Models.Category", "Category")
                        .WithMany("KPI")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StopLightManagement.Models.Department", "Department")
                        .WithMany("KPIS")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StopLightManagement.Models.Meeting", b =>
                {
                    b.HasOne("StopLightManagement.Models.Site", "Site")
                        .WithMany("Meetings")
                        .HasForeignKey("SiteCode", "OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StopLightManagement.Models.MeetingKPI", b =>
                {
                    b.HasOne("StopLightManagement.Models.KPI", "KPI")
                        .WithMany()
                        .HasForeignKey("KPIID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StopLightManagement.Models.Meeting", "Meeting")
                        .WithMany("MeetingKPIs")
                        .HasForeignKey("MeetingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StopLightManagement.Models.Site", b =>
                {
                    b.HasOne("StopLightManagement.Models.Organization", "Organization")
                        .WithMany("Sites")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("StopLightManagement.Models.Target", b =>
                {
                    b.HasOne("StopLightManagement.Models.KPI", "KPI")
                        .WithMany("Target")
                        .HasForeignKey("KPIID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
